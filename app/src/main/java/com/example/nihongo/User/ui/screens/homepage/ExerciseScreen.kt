package com.example.nihongo.User.ui.screens.homepage

import android.net.Uri
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.animateContentSize
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.navigation.NavController
import com.example.nihongo.User.data.models.Exercise
import com.example.nihongo.User.data.models.ExerciseType
import com.example.nihongo.User.data.repository.ExerciseRepository
import com.google.android.exoplayer2.MediaItem
import com.google.android.exoplayer2.SimpleExoPlayer
import com.google.android.exoplayer2.ui.PlayerView

@Composable
fun ExerciseScreen(
    navController: NavController,
    sublessonId: String,
    exerciseRepository: ExerciseRepository,
    lessonId: String
) {
    var exercises by remember { mutableStateOf<List<Exercise>>(emptyList()) }

    LaunchedEffect(sublessonId) {
        exercises = exerciseRepository.getExercisesBySubLessonId(sublessonId, lessonId)
    }

    NeonBackground {
        if (exercises.isEmpty()) {
            Box(
                modifier = Modifier.fillMaxSize(),
                contentAlignment = Alignment.Center
            ) {
                Text("ƒêang t·∫£i b√†i t·∫≠p...")
            }
        } else {
            Column(
                modifier = Modifier
                    .fillMaxSize()
            ) {
                exercises.forEach { exercise ->
                    when (exercise.type) {
                        ExerciseType.VIDEO -> {
                            VideoExerciseView(
                                navController,
                                sublessonId,
                                exercise.title ?: "",
                                exercise.videoUrl ?: "",
                                sampleExplanation
                            )
                        }
                        ExerciseType.FLASHCARD -> {
                            FlashcardExerciseView(
                                question = exercise.question ?: "",
                                answer = exercise.answer ?: ""
                            )
                        }
                        ExerciseType.MEMORY_GAME -> {
                            MemoryGameExerciseView(
                                question = exercise.question ?: "",
                                answer = exercise.answer ?: ""
                            )
                        }
                        ExerciseType.MULTIPLE_CHOICE -> {
                            MultipleChoiceExerciseView(
                                question = exercise.question ?: "",
                                options = exercise.options ?: emptyList(),
                                correctAnswer = exercise.answer ?: ""
                            )
                        }
                        ExerciseType.QUIZ -> {
                            QuizExerciseView(
                                question = exercise.question ?: "",
                                options = exercise.options ?: emptyList(),
                                correctAnswer = exercise.answer ?: ""
                            )
                        }
                        else -> {
                            Text("Kh√¥ng x√°c ƒë·ªãnh lo·∫°i b√†i t·∫≠p.")
                        }
                    }
                    Spacer(modifier = Modifier.height(24.dp))
                }
            }
        }
    }
}


@Composable
fun NeonBackground(content: @Composable () -> Unit) {
    val gradientBrush = Brush.linearGradient(
        colorStops = arrayOf(
            0.0f to Color(0xFF00CC00).copy(alpha = 0.5f),  // Xanh l√° ƒë·∫≠m
            0.2f to Color(0xFF00CC00).copy(alpha = 0.3f),  // Xanh l√° nh·∫°t
            0.5f to Color.White.copy(alpha = 0.2f),         // Tr·∫Øng m·ªù d·∫ßn
            0.7f to Color(0xFF0099CC).copy(alpha = 0.3f),  // Xanh bi·ªÉn nh·∫°t
            1.0f to Color(0xFF0099CC).copy(alpha = 0.5f)   // Xanh bi·ªÉn ƒë·∫≠m
        ),
        start = Offset(0f, 0f),    // T·∫°o ƒëi·ªÉm b·∫Øt ƒë·∫ßu
        end = Offset(1000f, 1000f) // T·∫°o ƒëi·ªÉm k·∫øt th√∫c
    )

    // Radial Gradient to·∫£ s√°ng t·ª´ gi·ªØa
    val radialBrush = Brush.radialGradient(
        colorStops = arrayOf(
            0.0f to Color(0xFF00CC00).copy(alpha = 0.6f),  // Xanh l√° ƒë·∫≠m ·ªü trung t√¢m
            0.3f to Color(0xFF00CC00).copy(alpha = 0.4f),  // Xanh l√° nh·∫π h∆°n khi ra ngo√†i
            0.6f to Color.White.copy(alpha = 0.3f),         // Pha tr·∫Øng nh·∫π h∆°n n·ªØa
            1.0f to Color(0xFF0099CC).copy(alpha = 0.2f)   // Xanh bi·ªÉn pha lo√£ng g·∫ßn bi√™n
        ),
        center = Offset(500f, 1000f),  // Canh gi·ªØa m√†n h√¨nh
        radius = 1500f                  // Ph·∫°m vi t·ªèa s√°ng
    )

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(brush = radialBrush) // T·∫°o background radial gradient
            .background(brush = gradientBrush) // ƒê·ªìng th·ªùi √°p d·ª•ng linear gradient
    ) {
        content() // N·ªôi dung c·ªßa b·∫°n ·ªü ƒë√¢y
    }
}







@Composable
fun VideoExerciseView(
    navController: NavController,
    sublessonId: String,
    title: String,
    videoPath: String,
    explanation: List<Pair<String, String>>
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
    ) {
        // üëá Video full width, s√°t vi·ªÅn ·ª©ng d·ª•ng
        AndroidView(
            factory = { context ->
                val player = SimpleExoPlayer.Builder(context).build().apply {
                    val mediaItem = MediaItem.fromUri(Uri.parse(videoPath))
                    setMediaItem(mediaItem)
                    prepare()
                    playWhenReady = false
                }
                PlayerView(context).apply { this.player = player }
            },
            modifier = Modifier
                .fillMaxWidth()
                .aspectRatio(16 / 9f)
        )

        Spacer(modifier = Modifier.height(16.dp))

        // üëá Ph·∫ßn n·ªôi dung c√≤n l·∫°i c√≥ padding nh∆∞ th∆∞·ªùng
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                text = title,
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(24.dp))

            ExpandableExplanationCards(
                explanationItems = explanation,
                subLessonId = sublessonId,
                onPracticeClick = { id, type ->
                    navController.navigate("exercise/${id}/${type.name}")
                }
            )

            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}


@Composable
fun ExpandableExplanationCards(
    explanationItems: List<Pair<String, String>>,
    subLessonId: String,
    onPracticeClick: (subLessonId: String, exerciseType: ExerciseType) -> Unit
) {
    val expandedCardIndex = remember { mutableStateOf(-1) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(horizontal = 16.dp, vertical = 8.dp)
    ) {
        explanationItems.forEachIndexed { index, (title, content) ->
            val isExpanded = expandedCardIndex.value == index

            Card(
                shape = RoundedCornerShape(16.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp)
                    .animateContentSize()
                    .clickable {
                        expandedCardIndex.value = if (isExpanded) -1 else index
                    },
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFFF9FAFB) // N·ªÅn m·ªÅm m·∫°i
                )
            ) {
                Column(modifier = Modifier.padding(16.dp)) {
                    Text(
                        text = title,
                        style = MaterialTheme.typography.titleMedium.copy(
                            fontWeight = FontWeight.Bold,
                            color = Color(0xFF1E293B) // Xanh ƒë·∫≠m hi·ªán ƒë·∫°i
                        )
                    )

                    AnimatedVisibility(visible = isExpanded) {
                        Column(modifier = Modifier.padding(top = 12.dp)) {
                            Divider(color = Color(0xFFE2E8F0), thickness = 1.dp)
                            Spacer(modifier = Modifier.height(12.dp))

                            Text(
                                text = content,
                                style = MaterialTheme.typography.bodyMedium.copy(
                                    lineHeight = 20.sp,
                                    color = Color(0xFF334155)
                                )
                            )

                            Spacer(modifier = Modifier.height(16.dp))
                        }
                    }
                }
            }
        }

        // N√∫t "B·∫Øt ƒë·∫ßu luy·ªán t·∫≠p" cƒÉn gi·ªØa
        Box(
            modifier = Modifier.fillMaxWidth(), // ƒê·∫£m b·∫£o Box chi·∫øm to√†n b·ªô chi·ªÅu r·ªông
            contentAlignment = Alignment.Center // CƒÉn gi·ªØa Button trong Box
        ) {
            Button(
                onClick = {
                    onPracticeClick(subLessonId, ExerciseType.FLASHCARD)
                },
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color(0xFF10B981), // M√†u xanh l√° chuy√™n nghi·ªáp
                    contentColor = Color.White
                ),
                modifier = Modifier.padding(top = 16.dp) // CƒÉn ch·ªânh v√† t·∫°o kho·∫£ng c√°ch
            ) {
                Text("B·∫Øt ƒë·∫ßu luy·ªán t·∫≠p")
            }
        }
    }
}



@Composable
fun FlashcardExerciseView(question: String, answer: String) {
    var isAnswerVisible by remember { mutableStateOf(false) }
    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        Text("Flashcard", fontSize = 20.sp, fontWeight = FontWeight.Bold)
        Text(question, fontSize = 18.sp, modifier = Modifier.padding(bottom = 16.dp))
        Button(onClick = { isAnswerVisible = !isAnswerVisible }) {
            Text(text = if (isAnswerVisible) "·∫®n c√¢u tr·∫£ l·ªùi" else "Hi·ªán c√¢u tr·∫£ l·ªùi")
        }
        AnimatedVisibility(visible = isAnswerVisible) {
            Text(answer, fontSize = 18.sp, fontWeight = FontWeight.Bold, modifier = Modifier.padding(top = 16.dp))
        }
    }
}

@Composable
fun MemoryGameExerciseView(question: String, answer: String) {
    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        Text("Memory Game", fontSize = 20.sp, fontWeight = FontWeight.Bold)
        Text(question, fontSize = 18.sp)
        // Placeholder cho tr√≤ ch∆°i memory game
    }
}

@Composable
fun MultipleChoiceExerciseView(question: String, options: List<String>, correctAnswer: String) {
    var selectedOption by remember { mutableStateOf("") }
    var isAnswerCorrect by remember { mutableStateOf(false) }
    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        Text("Multiple Choice", fontSize = 20.sp, fontWeight = FontWeight.Bold)
        Text(question, fontSize = 18.sp, modifier = Modifier.padding(bottom = 16.dp))
        options.forEach { option ->
            Row(modifier = Modifier.fillMaxWidth().clickable {
                selectedOption = option
                isAnswerCorrect = option == correctAnswer
            }) {
                Text(option, fontSize = 18.sp, modifier = Modifier.padding(8.dp))
            }
        }
        if (selectedOption.isNotEmpty()) {
            Text(
                text = if (isAnswerCorrect) "Ch√≠nh x√°c!" else "Sai r·ªìi!",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = if (isAnswerCorrect) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error
            )
        }
    }
}

@Composable
fun QuizExerciseView(question: String, options: List<String>, correctAnswer: String) {
    var selectedOption by remember { mutableStateOf("") }
    var isAnswerCorrect by remember { mutableStateOf(false) }
    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        Text("Quiz", fontSize = 20.sp, fontWeight = FontWeight.Bold)
        Text(question, fontSize = 18.sp, modifier = Modifier.padding(bottom = 16.dp))
        options.forEach { option ->
            Row(modifier = Modifier.fillMaxWidth().clickable {
                selectedOption = option
                isAnswerCorrect = option == correctAnswer
            }) {
                Text(option, fontSize = 18.sp, modifier = Modifier.padding(8.dp))
            }
        }
        if (selectedOption.isNotEmpty()) {
            Text(
                text = if (isAnswerCorrect) "Ch√≠nh x√°c!" else "Sai r·ªìi!",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = if (isAnswerCorrect) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error
            )
        }
    }
}

val sampleExplanation = listOf(
    "I. Gi·ªõi thi·ªáu c√°c lo·∫°i ch·ªØ trong ti·∫øng Nh·∫≠t" to """
        Trong ti·∫øng Nh·∫≠t c√≥ 3 lo·∫°i ch·ªØ:

        a. Kanji (ch·ªØ H√°n): Êó•Êú¨
        - Ch·ªØ Kanji du nh·∫≠p t·ª´ Trung Qu·ªëc v√†o Nh·∫≠t B·∫£n t·ª´ th·∫ø k·ª∑ th·ª© 4.

        b. Hiragana (ch·ªØ m·ªÅm): „Å´„Åª„Çì
        - Hiragana ƒë∆∞·ª£c t·∫°o t·ª´ Kanji, d√πng vi·∫øt tr·ª£ t·ª´, t·ª´ thu·∫ßn Nh·∫≠t.
        - VD: ‰∏ñ ‚áí „Åõ.

        c. Katakana (ch·ªØ c·ª©ng): ‰∫å„Éõ„É≥
        - Katakana d√πng cho t·ª´ ngo·∫°i lai, t√™n n∆∞·ªõc, t√™n ri√™ng.
        - VD: Orange ‚áí „Ç™„É¨„É≥„Ç∏.
    """.trimIndent(),

    "II. Gi·ªõi thi·ªáu b·∫£ng ch·ªØ c√°i Hiragana" to """
        - B·∫£ng Hiragana g·ªìm 46 ch·ªØ c√°i.
        - H√†ng „ÅÇ: „ÅÇ(a), „ÅÑ(i), „ÅÜ(u), „Åà(e), „Åä(o).
        - H√†ng „Åã: „Åã(ka), „Åç(ki), „Åè(ku), „Åë(ke), „Åì(ko).
        - H√†ng „Åï: „Åï(sa), „Åó(shi), „Åô(su), „Åõ(se), „Åù(so).
        - H√†ng „Åü: „Åü(ta), „Å°(chi), „Å§(tsu), „Å¶(te), „Å®(to).
        - H√†ng „Å™: „Å™(na), „Å´(ni), „Å¨(nu), „Å≠(ne), „ÅÆ(no).
        - H√†ng „ÅØ: „ÅØ(ha), „Å≤(hi), „Åµ(fu), „Å∏(he), „Åª(ho).
        - H√†ng „Åæ: „Åæ(ma), „Åø(mi), „ÇÄ(mu), „ÇÅ(me), „ÇÇ(mo).
        - H√†ng „ÇÑ: „ÇÑ(ya), „ÇÜ(yu), „Çà(yo).
        - H√†ng „Çâ: „Çâ(ra), „Çä(ri), „Çã(ru), „Çå(re), „Çç(ro).
        - H√†ng „Çè: „Çè(wa), „Çí(wo), „Çì(n).
    """.trimIndent()
)
